<?php

namespace BRS\FileBundle\Repository;

use BRS\FileBundle\Entity\File;
use BRS\CoreBundle\Core\Utility;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Symfony\Component\HttpFoundation\Request;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends NestedTreeRepository
{
	
	public function getRootFor($object, $create = FALSE)
	{
		if(!is_object($object)) return false;
		
		$node = new File();
		
		$class = get_class($object);
		$em = $this->getEntityManager();
		
		$nodes = $em->createQuery("SELECT n FROM BRSFileBundle:File n WHERE n.class_root = :class_root")
			->setParameter('class_root', $class)
			->setMaxResults(1)
			->getResult();
		
		if(isset($nodes[0]) && $nodes[0] !== null)
			return $nodes[0];
		else if ($create === TRUE)
			return $node->setClassRoot($object)->setIsDir(TRUE);
		else
			return false;
	}
	
	public function getRootByName($name, $create = FALSE)
	{
		$files = $this->getEntityManager()
			->createQuery("SELECT f FROM BRSFileBundle:File f WHERE f.name = :name AND f.tree_level = 0")
			->setParameter('name', $name)
			->setMaxResults(1)
			->getResult();
		
		if(isset($files[0]) && $files[0] !== null)
			$file = $files[0];
		
		else {
			$file = new File();
			$file->setName($name);
			$file->setIsDir(true);
			
			$em = $this->getEntityManager();
			$em->persist($file);
		}
		
		return $file;
	}
	
	public function searchInDir($dir, $query, $order = null)
	{
		
		$query_builder = $this->getEntityManager()
			->createQueryBuilder()
			->select('f')
			->from('BRSFileBundle:File', 'f')
			->where('f.tree_left > :tree_left AND f.tree_right < :tree_right')
			->setParameter('tree_left', $dir->tree_left)
			->setParameter('tree_right', $dir->tree_right);
		
		if($order){
			
			$query_builder->orderBy('f.' . $order);
		}
			
		
		$query_pieces = explode(' ', $query);
			
		foreach($query_pieces as $i => $q){
			
			$query_builder->andWhere('f.name LIKE :name' . $i)->setParameter('name'. $i, '%' . $q . '%');
		}
			
		$files = $query_builder->getQuery()->getResult();
		
		return $files;
	}
	
	
	public function hanldeUploadRequest(\Symfony\Component\HttpFoundation\Request $request, $form, $directory = null){
		
		if ($request->getMethod() === 'POST') {
			
			//strip everything but the csrf token from the request and just handle the file
			
			$form_post = $request->get('form');
			
			$parent_folder = $request->get('parent_folder');
			
			//$params = array('form' => array('_token' => $form_post['_token']));
			$params = array('form' => array());
			
			$new_request = Request::create($request->getUri(), 'POST', $params, $_COOKIE, $_FILES, $_SERVER, $request->getContent());
			
			$files = $new_request->files->all();
			$file = $files['file'];
			
			$form->bindRequest($new_request);
			
			if ($form->isValid() && $file) {
				
				//if the uploaded file is valid
				if($file->isValid()) {
					
					$file_obj = $form->getData();
					
					$em = $this->getEntityManager();
					
					$file_obj->file = $file;
					
					if ($directory) {
						$file_obj->setParent($directory);
					} else {
						$parent_id = null;
						
						if(isset($form_post['parent_id'])){
							
							$parent_id = $form_post['parent_id'];
						}
						
						if($parent_folder){
								
							$parent = $this->getRootByName($parent_folder);			
							
							$parent_id = $parent->id;
						}
						
						if($parent_id){
							
							$parent = $em->getReference('\BRS\FileBundle\Entity\File', $parent_id);
							
							$file_obj->setParent($parent);
						}
					}
					
					
					$em->persist($file_obj);
					
					$em->flush();
		
					$values = array(
						'status' => 'success',
						'file' => $file_obj,
					);
					
					return $values;
					
				} else {
					
					$this->throwUploadedFileException($file);
					
				}
				
			}else{
				
				$errors = Utility::get_form_errors($form);
				
				$values = array(
					'status' => 'fail',
					'errors' => $errors,
				);
				
				return $values;
			}
		}
		
		$values = array(
			'status' => 'fail',
		);
		
		return $values;
	}
	
	/**
	 * Checks the error number for the uploaded file against php's uploaded error messages
	 * 
	 * http://api.symfony.com/2.0/Symfony/Component/HttpFoundation/File/UploadedFile.html
	 * http://php.net/manual/en/features.file-upload.errors.php
	 */
	private function throwUploadedFileException($file) {
		
		$max_size = $this->bytesToSize($file->getMaxFilesize());
		
		//php uploaded errors conversions
		$php_uploaded_errors = array(
			1 => "The uploaded file exceeds the maximum size of $max_size", //set in php.ini
			2 => "The uploaded file exceeds the maximum size of $max_size", //set on the html form
			3 => 'The uploaded file was only partially uploaded',
			4 => 'No file was uploaded',
			6 => 'Missing a temporary folder',
			7 => 'Failed to write file to disk',
			8 => 'A PHP extension stopped the file upload',
		);
		
		//throw the exception with the appropriate message
		throw new \Exception($php_uploaded_errors[$file->getError()]);
		
	}
	
	/**
	 * Convert bytes to human readable format
	 * 
	 * taken from: http://codeaid.net/php/convert-size-in-bytes-to-a-human-readable-format-%28php%29
	 * 
	 * @param integer bytes Size in bytes to convert
	 * @return string
	 */
	private function bytesToSize($bytes, $precision = 2)
	{
	    $kilobyte = 1024;
	    $megabyte = $kilobyte * 1024;
	    $gigabyte = $megabyte * 1024;
	    $terabyte = $gigabyte * 1024;
	   
	    if (($bytes >= 0) && ($bytes < $kilobyte)) {
	        return $bytes . ' B';
	 
	    } elseif (($bytes >= $kilobyte) && ($bytes < $megabyte)) {
	        return round($bytes / $kilobyte, $precision) . ' KB';
	 
	    } elseif (($bytes >= $megabyte) && ($bytes < $gigabyte)) {
	        return round($bytes / $megabyte, $precision) . ' MB';
	 
	    } elseif (($bytes >= $gigabyte) && ($bytes < $terabyte)) {
	        return round($bytes / $gigabyte, $precision) . ' GB';
	 
	    } elseif ($bytes >= $terabyte) {
	        return round($bytes / $terabyte, $precision) . ' TB';
	    } else {
	        return $bytes . ' B';
	    }
	}
	
}
